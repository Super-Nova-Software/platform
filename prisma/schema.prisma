generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fullname      String
  clerkId       String      @unique
  type          String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  stripeId      String?
  
  role          UserRole    @default(CLIENT)

  campaign      Campaign[]
  subscription  Billings?
  
  ChatRoom      ChatRoom[]  @relation("UserChatRooms")
  Case          Case[]      @relation("LawyerCases")
  clientCases   Case[]      @relation("ClientCases")
  ChatMessage   ChatMessage[]
  Document      Document[]   
  deletedAt     DateTime?    @db.Timestamp(6)

  clientBookings Bookings[] @relation("ClientBookings")
  lawyerBookings Bookings[] @relation("LawyerBookings")

  LawFirm LawFirm[] @relation("LawFirmLawyers")

  Bookmark Bookmark[]
  lawyerBookmarks Bookmark[] @relation("LawyerBookmark")

  @@index([clerkId])
}

model Bookmark {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @db.Uuid
  case       Case?    @relation(fields: [caseId], references: [id], onDelete: Cascade)
  caseId     String?  @db.Uuid
  document   Document? @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId String?  @db.Uuid
  lawyer     User?    @relation("LawyerBookmark", fields: [lawyerId], references: [id], onDelete: Cascade)
  lawyerId   String?  @db.Uuid

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userId]) 
}

model Case {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  description   String?
  icon          String?
  lawyer        User?     @relation("LawyerCases", fields: [lawyerId], references: [id], onDelete: Cascade)
  lawyerId      String?   @db.Uuid
  client        User?     @relation("ClientCases", fields: [clientId], references: [id], onDelete: Cascade)
  clientId      String?   @db.Uuid

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  chatRoom      ChatRoom?
  chatRoomId    String?   @db.Uuid @unique
  
  Campaign      Campaign[]
  Document      Document[]
  HelpDesk      HelpDesk[]
  schedule      Schedule[]
  FilterQuestions FilterQuestions[]
  LawFirm LawFirm[] @relation("LawFirmCases")

  Bookmark Bookmark[]

  @@index([lawyerId]) 
  @@index([clientId]) 
}

model LawFirm {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  address     String?
  phoneNumber String?
  email       String?
  website     String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  lawyers     User[]     @relation("LawFirmLawyers")
  cases       Case[]     @relation("LawFirmCases")
}

model Schedule {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  case            Case?    @relation(fields: [caseId], references: [id], onDelete: Cascade)
  caseId         String?   @db.Uuid
  userId         String    @db.Uuid 
  scheduledAt    DateTime 
  duration        Int    
  status          ScheduleStatus @default(PENDING)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([caseId]) 
  @@index([userId])
}

model Document {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String?
  file          String
  description   String?
  User          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String?  @db.Uuid
  case          Case?    @relation(fields: [caseId], references: [id], onDelete: Cascade)
  caseId        String?  @db.Uuid
  createdAt     DateTime @default(now())

  Bookmark Bookmark[]

  @@index([userId]) 
  @@index([caseId])
}

model ChatRoom {
  id             String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  users          User[]     @relation("UserChatRooms")
  case           Case?      @relation(fields: [caseId], references: [id], onDelete: Cascade)
  caseId        String?     @db.Uuid @unique

  messages       ChatMessage[]

  @@index([caseId]) 
}

model ChatMessage {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  message       String
  sender        User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId      String    @db.Uuid
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  chatRoom      ChatRoom  @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatRoomId    String    @db.Uuid

  @@index([senderId]) 
  @@index([chatRoomId])
}

model Bookings {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date       DateTime
  slot       String
  caseId     String?   @db.Uuid
  createdAt  DateTime  @default(now())

  client     User      @relation("ClientBookings", fields: [clientId], references: [id], onDelete: Cascade)
  clientId   String    @db.Uuid
  
  lawyer     User      @relation("LawyerBookings", fields: [lawyerId], references: [id], onDelete: Cascade)
  lawyerId   String    @db.Uuid
  
  status      BookingStatus @default(PENDING)

  @@index([clientId]) 
  @@index([lawyerId])
}

model Billings {
  id           String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  plan         Plans   @default(STANDARD)
  credits      Int     @default(10)
  User         User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String? @unique @db.Uuid

  @@index([userId])
}

model HelpDesk {
  id           String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  question     String
  answer       String
  case         Case?   @relation(fields: [caseId], references: [id], onDelete: Cascade)
  caseId       String? @db.Uuid

  @@index([caseId])
}

model FilterQuestions {
  id           String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  question     String
  answered     String?

  case         Case?   @relation(fields: [caseId], references: [id], onDelete: Cascade)
  caseId       String? @db.Uuid

  @@index([caseId])
}

model Campaign {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  users         String[] 
  case          Case[]
  template      String?
  User          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String?  @db.Uuid
  createdAt     DateTime @default(now())

  @@index([userId])
}

enum Plans {
  STANDARD
  PRO
  ULTIMATE
}

enum ScheduleStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum UserRole {
  ADMIN
  LAWYER
  CLIENT
}

enum BookingStatus {
  PENDING
  ACCEPTED
  REJECTED
}
